version: '3.8'

services:
  # 主应用服务
  app:
    build: .
    container_name: crawler-assistant-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+aiomysql://crawler_user:crawler_password@db:3306/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=false
      - LOG_LEVEL=INFO
      - BROWSER_HEADLESS=true
      - ENABLE_STEALTH_MODE=true
      - HUMAN_BEHAVIOR_SIMULATION=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./exports:/app/exports
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - crawler-network

  # MySQL数据库
  db:
    image: mysql:8.0
    container_name: crawler-assistant-db
    environment:
      - MYSQL_DATABASE=crawler_db
      - MYSQL_USER=crawler_user
      - MYSQL_PASSWORD=crawler_password
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init_mysql.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "crawler_user", "-pcrawler_password"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - crawler-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: crawler-assistant-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - crawler-network

  # Celery Worker (后台任务处理)
  worker:
    build: .
    container_name: crawler-assistant-worker
    command: celery -A app.tasks.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=mysql+aiomysql://crawler_user:crawler_password@db:3306/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BROWSER_HEADLESS=true
      - ENABLE_STEALTH_MODE=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./exports:/app/exports
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - crawler-network

  # Celery Flower (任务监控)
  flower:
    build: .
    container_name: crawler-assistant-flower
    command: celery -A app.tasks.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - crawler-network

  # Nginx反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    container_name: crawler-assistant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./exports:/var/www/exports
      - ./screenshots:/var/www/screenshots
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - crawler-network
    profiles:
      - production

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: crawler-assistant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - crawler-network
    profiles:
      - monitoring

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: crawler-assistant-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - crawler-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  crawler-network:
    driver: bridge
    name: crawler-assistant-network

